name: Maven build

on:
  workflow_call:
    inputs:
      SERVICE_LOCATION:
        required: true
        type: string
      BUILD_ARTIFACT:
        required: true
        type: string
      MAVEN_NON_EXEC_ARTIFACTS:
        required: false
        type: string
jobs:
  maven-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: adopt
        java-version: 11
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Setup branch and env
      run: |
        # Strip git ref prefix from version
        echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
        echo "GPG_TTY=$(tty)" >> $GITHUB_ENV 

  
    - name: Install xmlstartlet and xmllint
      run: |
        sudo rm /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update
        sudo apt-get install xmlstarlet libxml2-utils

    - name: Build check for name, url, and description in pom.xml
      run: |
        cd ${{ inputs.SERVICE_LOCATION }}
        echo "Checking for project name in pom.xml"
        xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:name" -nl pom.xml | grep -q "."
        echo "Project name found"
        echo "Checking for project URL in pom.xml"
        xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:url" -nl pom.xml | grep -q "."
        echo "Project url found"
        echo "Checking for project description in pom.xml"
        xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:description" -nl pom.xml | grep -q "."
        echo "Project description found"

    - name: Validate pom.xml & settings.xml via xmllint
      run: |
        find ${{ inputs.SERVICE_LOCATION }} -type f -name pom.xml | while read -r F; do
          echo "Pom file : $F"
          xmllint --xpath '/*[local-name()="project"]/*[local-name()="version"]' $F
        done

    - name: Ready the springboot executable artifacts
      if: ${{ !contains(github.ref, 'master') || !contains(github.ref, 'main') }}
      run: |
        ## FIND JARS & COPY ONLY EXECUTABLE JARs STORED UNDER TARGET DIRECTORY 
        find ${{ inputs.SERVICE_LOCATION }} -path '*/target/*' -name '*.jar'  -type f  -executable -exec zip ${{ inputs.BUILD_ARTIFACT }}.zip {} +

    - name: Ready the springboot non-executable artifacts
      if: ${{ inputs.MAVEN_NON_EXEC_ARTIFACTS }}
      run: |
          IFS=',' read -ra ARTIFACTS <<< "${{ inputs.MAVEN_NON_EXEC_ARTIFACTS }}"
          for ARTIFACT in "${ARTIFACTS[@]}"; do
            artifact_path="*/target/${ARTIFACT}"
            if ls $artifact_path 1> /dev/null 2>&1; then
              echo "Adding non-executable ARTIFACT: $artifact_path to release zip"
              zip -r ${{ inputs.BUILD_ARTIFACT }}.zip $artifact_path
            else
              echo "Warning: ARTIFACT $ARTIFACT not found"
            fi
          done
     
    - name: Upload the springboot jars
      if: ${{ !contains(github.ref, 'master') || !contains(github.ref, 'main') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.BUILD_ARTIFACT }}
        path: ./${{ inputs.BUILD_ARTIFACT }}.zip

  
